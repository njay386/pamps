// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address to, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract LiquidityPool {
    address public tokenA;
    address public tokenB;
    uint256 public reserveA;
    uint256 public reserveB;

    mapping(address => uint256) public liquidity;

    constructor(address _tokenA, address _tokenB) {
        tokenA = _tokenA;
        tokenB = _tokenB;
    }

    function addLiquidity(uint256 amountA, uint256 amountB) external {
        IERC20(tokenA).transferFrom(msg.sender, address(this), amountA);
        IERC20(tokenB).transferFrom(msg.sender, address(this), amountB);
        reserveA += amountA;
        reserveB += amountB;
        // Simplified liquidity minting
        liquidity[msg.sender] += amountA + amountB;
    }

    function removeLiquidity(uint256 liquidityAmount) external {
        // Simplified liquidity burning
        require(liquidity[msg.sender] >= liquidityAmount, "Not enough liquidity");
        uint256 amountA = (liquidityAmount * reserveA) / (reserveA + reserveB);
        uint256 amountB = (liquidityAmount * reserveB) / (reserveA + reserveB);
        IERC20(tokenA).transfer(msg.sender, amountA);
        IERC20(tokenB).transfer(msg.sender, amountB);
        reserveA -= amountA;
        reserveB -= amountB;
        liquidity[msg.sender] -= liquidityAmount;
    }

    // Swap function and price calculation omitted for brevity
}
